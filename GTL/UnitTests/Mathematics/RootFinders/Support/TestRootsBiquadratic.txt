    using Rational = BSRational<UIntegerAP32>;
    RootsPolynomial<double> finder{};
    std::map<double, int32_t> rmMap{};

    // u = -c2/2, v = c2^2/4 - c0
    Rational c0{}, c2{}, u{}, v{};

    // v < 0 (block 28)
    c2 = Rational(2);
    c0 = Rational(2);
    u = -c2 / Rational(2);
    v = u * u - c0;
    //finder.SolveQuartic(c0, Rational(0), c2, Rational(0), Rational(1), rmMap);

    // v = 0, u < 0 (block 30)
    c2 = Rational(2);
    c0 = Rational(1);
    u = -c2 / Rational(2);
    v = u * u - c0;
    //finder.SolveQuartic(c0, Rational(0), c2, Rational(0), Rational(1), rmMap);

    // v = 0, u > 0 (block 29)
    c2 = Rational(-2);
    c0 = Rational(1);
    u = -c2 / Rational(2);
    v = u * u - c0;
    //finder.SolveQuartic(c0, Rational(0), c2, Rational(0), Rational(1), rmMap);

    // v > 0, u - sqrt(v) > 0 (block 25)
    c2 = Rational(-2);
    c0 = Rational(1, 2);
    u = -c2 / Rational(2);
    v = u * u - c0;
    //finder.SolveQuartic(c0, Rational(0), c2, Rational(0), Rational(1), rmMap);

    // v > 0, u + sqrt(v) < 0 (block 26)
    c2 = Rational(2);
    c0 = Rational(1, 2);
    u = -c2 / Rational(2);
    v = u * u - c0;
    finder.SolveQuartic(c0, Rational(0), c2, Rational(0), Rational(1), rmMap);

    // v > 0, u - sqrt(v) < 0, u + sqrt(v) > 0, (-sqrt(v) < u < sqrt(v)) (block 27)
    c2 = Rational(-2);
    c0 = Rational(-2);
    u = -c2 / Rational(2);
    v = u * u - c0;
    finder.SolveQuartic(c0, Rational(0), c2, Rational(0), Rational(1), rmMap);
